#include <bits/stdc++.h>

using namespace std;

// Complete the hourglassSum function below.
long int hourglassSum(vector<vector<int>> arr)
{
int maxSum = INT_MIN;

    for(int i = 1; i < 5; i++){
        // check if it is an eligible middle node
        for(int j = 1; j < 5; j++){
            if(i > 0 && i < 5 && j > 0 && j < 5){
            int localSum = 
                arr[i][j] + // middle middle
                arr[i - 1][j - 1] + // top left
                arr[i - 1][j] + // top middle
                arr[i - 1][j + 1] + // top right
                arr[i + 1][j - 1] + // bottom left
                arr[i + 1][j] + // bottom middle
                arr[i + 1][j + 1]; // bottom right 

                if(localSum >= maxSum){
                    maxSum = localSum;
                }
            }
        }
    }
    return maxSum;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<vector<int>> arr(6);
    for (int i = 0; i < 6; i++) {
        arr[i].resize(6);

        for (int j = 0; j < 6; j++) {
            cin >> arr[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    int result = hourglassSum(arr);

    fout << result << "\n";

    fout.close();

    return 0;
}
